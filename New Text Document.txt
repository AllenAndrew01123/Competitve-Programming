1)
ll fact[5001],inv[5001];
ll binpow(ll a, ll b) {
    if (b == 0)
        return 1;
    ll res = binpow(a, b / 2);
    if (b % 2)
        return ((((res%mod) * (res%mod))%mod) * (a%mod))%mod;
    else
        return ((res%mod) * (res%mod))%mod;
}
void calc()
{
    fact[0]=1;
    inv[0]=1;
    for(ll i=1;i<=5000;i++)
    {
        fact[i]=((fact[i-1]%mod)*i)%mod;
        inv[i]=binpow(fact[i],mod-2)%mod;
    }
}
ll nCr(ll n,ll r)
{
    if(n==0||n==r||n<r||r==0)
    return 1;
    return ((((fact[n]%mod)%mod*(inv[r]%mod)%mod)%mod)*inv[n-r]%mod)%mod;
}
2)
ll ext_gcd(ll a, ll b, ll &x, ll &y) {
    if (b == 0) {
        x = 1; y = 0;
        return a;
    }
    ll x1, y1;
    ll g = ext_gcd(b, a % b, x1, y1);
    x = y1;
    y = x1 - (a / b) * y1;
    return g;
}

ll modInverse(ll a, ll m) {
    ll x, y;
    ext_gcd(a, m, x, y);
    x %= m;
    if (x < 0) x += m;
    return x;
}
